{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0433\u043b\u0430\u0432\u043d\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043a \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c! \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3","title":"Home"},{"location":"Lab1/","text":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21161 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u0410\u043a\u0443\u043b\u043e\u0432 \u0410\u043b\u0435\u043a\u0441\u0435\u0439, K33391 \u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 FastAPI \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043e\u043c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u0430\u043c\u0438. \u0421\u0435\u0440\u0432\u0438\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u0434\u043e\u0445\u043e\u0434\u044b \u0438 \u0440\u0430\u0441\u0445\u043e\u0434\u044b, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0431\u044e\u0434\u0436\u0435\u0442\u044b \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043e\u0442\u0447\u0435\u0442\u044b \u043e \u0441\u0432\u043e\u0438\u0445 \u0444\u0438\u043d\u0430\u043d\u0441\u0430\u0445. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u0441\u0435\u0431\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439 \u043e \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u0438 \u0431\u044e\u0434\u0436\u0435\u0442\u0430, \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0442\u0440\u0430\u0442 \u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0446\u0435\u043b\u0435\u0439 \u043d\u0430 \u0431\u0443\u0434\u0443\u0449\u0435\u0435. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439: class User(SQLModel, table=True): id: int = Field(primary_key=True) username: str = Field(index=True) password: str balance: Optional[\"Balance\"] = Relationship(back_populates=\"user\") created_at: datetime.datetime = Field(default=datetime.datetime.now()) class UserInput(SQLModel): username: str password: str password2: str @validator('password2') def password_match(cls, v, values, **kwargs): if 'password' in values and v != values['password']: raise ValueError('Passwords don\\'t match') return v class UserLogin(SQLModel): username: str password: str class Balance(SQLModel, table=True): id: int = Field(primary_key=True) user_id: int = Field(foreign_key=\"user.id\") user: Optional[User] = Relationship(back_populates=\"balance\") total_budget: int = Field(default=0) saving_target: int = Field(default=0) categories: List[\"Category\"] = Relationship(back_populates=\"balance\") class Category(SQLModel, table=True): id: int = Field(primary_key=True) name: str limit: Optional[int] = None balance_id: int = Field(foreign_key=\"balance.id\") balance: Balance = Relationship(back_populates=\"categories\") transactions: List[\"Transaction\"] = Relationship(back_populates=\"category\") class TransactionType(str, Enum): INCOME = \"income\" EXPENSE = \"expense\" class Transaction(SQLModel, table=True): id: int = Field(primary_key=True) category_id: int = Field(foreign_key=\"category.id\") category: Category = Relationship(back_populates=\"transactions\") type: TransactionType value: int created_at: datetime.datetime = Field(default=datetime.datetime.now()) class TransactionsCreate(SQLModel): category_id: int type: TransactionType value: int class TransactionsUpdate(SQLModel): category_id: int type: TransactionType value: int class TransactionRead(SQLModel): id: int category_id: int type: TransactionType value: int created_at: datetime.datetime class CategoryRead(SQLModel): id: int name: str limit: Optional[int] transactions: List[TransactionRead] class BalanceRead(SQLModel): id: int total_budget: int saving_target: int categories: List[CategoryRead] class UserRead(SQLModel): id: int username: str balance: BalanceRead created_at: datetime.datetime \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u044d\u043d\u043f\u043e\u0438\u043d\u0442\u043e\u0432: main_router = APIRouter() @main_router.get(\"/users/{user_id}\", response_model=UserRead) def get_user_with_balance_and_categories(user_id: int): user = (session.query(User) .options(joinedload(User.balance) .joinedload(Balance.categories) .joinedload(Category.transactions)) .filter(User.id == user_id) .first()) if not user: raise HTTPException(status_code=404, detail=\"User not found\") return user @main_router.get(\"/balances/{user_id}\", response_model=BalanceRead) def get_balance_with_categories(user_id: int): balance = (session.query(Balance) .options(joinedload(Balance.categories) .joinedload(Category.transactions)) .filter(Balance.user_id == user_id) .first()) if not balance: raise HTTPException(status_code=404, detail=\"Balance not found\") return balance @main_router.get(\"/categories/{category_id}\", response_model=CategoryRead) def get_category_with_transactions(category_id: int): category = (session.query(Category) .options(joinedload(Category.transactions)) .filter(Category.id == category_id) .first()) if not category: raise HTTPException(status_code=404, detail=\"Category not found\") return category @main_router.post(\"/transactions/\", response_model=TransactionRead) def create_transaction(transaction: TransactionsCreate, user=Depends(auth_handler.auth_wrapper)): db_transaction = Transaction(**transaction.dict()) session.add(db_transaction) session.commit() session.refresh(db_transaction) return db_transaction @main_router.put(\"/transactions/{transaction_id}\", response_model=TransactionRead) def update_transaction(transaction_id: int, transaction_data: TransactionsUpdate, user=Depends(auth_handler.auth_wrapper)): transaction = session.get(Transaction, transaction_id) if transaction is None: raise HTTPException(status_code=404, detail=\"Transaction not found\") transaction.category_id = transaction_data.category_id transaction.type = transaction_data.type transaction.value = transaction_data.value session.commit() return transaction @main_router.delete(\"/transactions/{transaction_id}\") def delete_transaction(transaction_id: int, user=Depends(auth_handler.auth_wrapper)): transaction = session.get(Transaction, transaction_id) if transaction is None: raise HTTPException(status_code=404, detail=\"Transaction not found\") session.delete(transaction) session.commit() return {\"message\": \"Transaction deleted\"} @main_router.post(\"/balances/{balance_id}/categories/\", response_model=CategoryRead) def create_category(balance_id: int, category: Category, user=Depends(auth_handler.auth_wrapper)): db_balance = session.get(Balance, balance_id) if not db_balance: raise HTTPException(status_code=404, detail=\"Balance not found\") new_category = Category(**category.dict(), balance_id=balance_id) session.add(new_category) session.commit() session.refresh(new_category) return new_category @main_router.put(\"/categories/{category_id}\", response_model=CategoryRead) def update_category(category_id: int, category_data: Category, user=Depends(auth_handler.auth_wrapper)): category = session.get(Category, category_id) if not category: raise HTTPException(status_code=404, detail=\"Category not found\") category.name = category_data.name category.limit = category_data.limit session.commit() return category @main_router.delete(\"/categories/{category_id}\") def delete_category(category_id: int, user=Depends(auth_handler.auth_wrapper)): category = session.get(Category, category_id) if not category: raise HTTPException(status_code=404, detail=\"Category not found\") session.delete(category) session.commit() return {\"message\": \"Category deleted\"} \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432: load_dotenv() secret_key = os.getenv(\"JS_SECRET\") class AuthHandler: security = HTTPBearer() pwd_context = CryptContext(schemes=['bcrypt']) secret = secret_key def get_password_hash(self, password): return self.pwd_context.hash(password) def verify_password(self, pwd, hashed_pwd): return self.pwd_context.verify(pwd, hashed_pwd) def encode_token(self, user_id): if self.secret is None: raise ValueError(\"No SECRET_KEY set for JWT encoding\") payload = { 'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=8), 'iat': datetime.datetime.utcnow(), 'sub': user_id } return jwt.encode(payload, self.secret, algorithm='HS256') def decode_token(self, token): try: payload = jwt.decode(token, self.secret, algorithms=['HS256']) return payload['sub'] except jwt.ExpiredSignatureError: raise HTTPException(status_code=401, detail='Expired signature') except jwt.InvalidTokenError: raise HTTPException(status_code=401, detail='Invalid token') def auth_wrapper(self, auth: HTTPAuthorizationCredentials = Security(security)): return self.decode_token(auth.credentials) def get_current_user(self, auth: HTTPAuthorizationCredentials = Security(security)): credentials_exception = HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail='Could not validate credentials' ) username = self.decode_token(auth.credentials) if username is None: raise credentials_exception user = find_user(username) if username is None: raise credentials_exception return user from fastapi import APIRouter, HTTPException, Depends from starlette.responses import JSONResponse from starlette.status import HTTP_201_CREATED from auth import AuthHandler from models import Balance, UserInput, User, UserLogin from useful import select_all_users, find_user from db import session user_router = APIRouter() auth_handler = AuthHandler() @user_router.post('/registration', status_code=201, tags=['users'], description='Register new user') def register(user: UserInput): users = select_all_users() if any(x.username == user.username for x in users): raise HTTPException(status_code=400, detail='Username is taken') hashed_pwd = auth_handler.get_password_hash(user.password) balance = Balance(balance=0) u = User(username=user.username, password=hashed_pwd, balance=balance) session.add_all([u, balance]) session.commit() return JSONResponse(status_code=201, content={\"message\": \"User registered successfully\"}) @user_router.post('/login', tags=['users']) def login(user: UserLogin): user_found = find_user(user.username) if not user_found: raise HTTPException(status_code=401, detail='Invalid username and/or password') verified = auth_handler.verify_password(user.password, user_found.password) if not verified: raise HTTPException(status_code=401, detail='Invalid username and/or password') token = auth_handler.encode_token(user_found.username) return {'token': token} @user_router.post('/users/me', tags=['users']) def get_current_user(user: User = Depends(auth_handler.get_current_user)): return user.username \u0414\u0440\u0443\u0433\u0438\u0435 \u0444\u0430\u0439\u043b\u044b from sqlmodel import create_engine, Session import os from dotenv import load_dotenv load_dotenv() db_url = os.getenv(\"DB_ADMIN\") engine = create_engine(db_url, echo=True) session = Session(bind=engine) from sqlmodel import select from db import engine, Session from models import User def select_all_users(): with Session(engine) as session: statement = select(User) res = session.exec(statement).all() return res def find_user(name): with Session(engine) as session: statement = select(User).where(User.username == name) return session.exec(statement).first() \u0412\u044b\u0432\u043e\u0434 \u041f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u044f \u0438\u0437\u0443\u0447\u0438\u043b \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 FastAPI, \u043d\u0430\u0443\u0447\u0438\u043b\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430\u043c\u0438.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f1"},{"location":"Lab1/#no1","text":"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u0410\u043a\u0443\u043b\u043e\u0432 \u0410\u043b\u0435\u043a\u0441\u0435\u0439, K33391","title":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21161"},{"location":"Lab1/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 FastAPI \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","title":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b:"},{"location":"Lab1/#_2","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"Lab1/#_3","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043e\u043c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u0430\u043c\u0438. \u0421\u0435\u0440\u0432\u0438\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u0434\u043e\u0445\u043e\u0434\u044b \u0438 \u0440\u0430\u0441\u0445\u043e\u0434\u044b, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0431\u044e\u0434\u0436\u0435\u0442\u044b \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043e\u0442\u0447\u0435\u0442\u044b \u043e \u0441\u0432\u043e\u0438\u0445 \u0444\u0438\u043d\u0430\u043d\u0441\u0430\u0445. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u0441\u0435\u0431\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439 \u043e \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u0438 \u0431\u044e\u0434\u0436\u0435\u0442\u0430, \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0442\u0440\u0430\u0442 \u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0446\u0435\u043b\u0435\u0439 \u043d\u0430 \u0431\u0443\u0434\u0443\u0449\u0435\u0435.","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f:"},{"location":"Lab1/#_4","text":"class User(SQLModel, table=True): id: int = Field(primary_key=True) username: str = Field(index=True) password: str balance: Optional[\"Balance\"] = Relationship(back_populates=\"user\") created_at: datetime.datetime = Field(default=datetime.datetime.now()) class UserInput(SQLModel): username: str password: str password2: str @validator('password2') def password_match(cls, v, values, **kwargs): if 'password' in values and v != values['password']: raise ValueError('Passwords don\\'t match') return v class UserLogin(SQLModel): username: str password: str class Balance(SQLModel, table=True): id: int = Field(primary_key=True) user_id: int = Field(foreign_key=\"user.id\") user: Optional[User] = Relationship(back_populates=\"balance\") total_budget: int = Field(default=0) saving_target: int = Field(default=0) categories: List[\"Category\"] = Relationship(back_populates=\"balance\") class Category(SQLModel, table=True): id: int = Field(primary_key=True) name: str limit: Optional[int] = None balance_id: int = Field(foreign_key=\"balance.id\") balance: Balance = Relationship(back_populates=\"categories\") transactions: List[\"Transaction\"] = Relationship(back_populates=\"category\") class TransactionType(str, Enum): INCOME = \"income\" EXPENSE = \"expense\" class Transaction(SQLModel, table=True): id: int = Field(primary_key=True) category_id: int = Field(foreign_key=\"category.id\") category: Category = Relationship(back_populates=\"transactions\") type: TransactionType value: int created_at: datetime.datetime = Field(default=datetime.datetime.now()) class TransactionsCreate(SQLModel): category_id: int type: TransactionType value: int class TransactionsUpdate(SQLModel): category_id: int type: TransactionType value: int class TransactionRead(SQLModel): id: int category_id: int type: TransactionType value: int created_at: datetime.datetime class CategoryRead(SQLModel): id: int name: str limit: Optional[int] transactions: List[TransactionRead] class BalanceRead(SQLModel): id: int total_budget: int saving_target: int categories: List[CategoryRead] class UserRead(SQLModel): id: int username: str balance: BalanceRead created_at: datetime.datetime","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439:"},{"location":"Lab1/#_5","text":"main_router = APIRouter() @main_router.get(\"/users/{user_id}\", response_model=UserRead) def get_user_with_balance_and_categories(user_id: int): user = (session.query(User) .options(joinedload(User.balance) .joinedload(Balance.categories) .joinedload(Category.transactions)) .filter(User.id == user_id) .first()) if not user: raise HTTPException(status_code=404, detail=\"User not found\") return user @main_router.get(\"/balances/{user_id}\", response_model=BalanceRead) def get_balance_with_categories(user_id: int): balance = (session.query(Balance) .options(joinedload(Balance.categories) .joinedload(Category.transactions)) .filter(Balance.user_id == user_id) .first()) if not balance: raise HTTPException(status_code=404, detail=\"Balance not found\") return balance @main_router.get(\"/categories/{category_id}\", response_model=CategoryRead) def get_category_with_transactions(category_id: int): category = (session.query(Category) .options(joinedload(Category.transactions)) .filter(Category.id == category_id) .first()) if not category: raise HTTPException(status_code=404, detail=\"Category not found\") return category @main_router.post(\"/transactions/\", response_model=TransactionRead) def create_transaction(transaction: TransactionsCreate, user=Depends(auth_handler.auth_wrapper)): db_transaction = Transaction(**transaction.dict()) session.add(db_transaction) session.commit() session.refresh(db_transaction) return db_transaction @main_router.put(\"/transactions/{transaction_id}\", response_model=TransactionRead) def update_transaction(transaction_id: int, transaction_data: TransactionsUpdate, user=Depends(auth_handler.auth_wrapper)): transaction = session.get(Transaction, transaction_id) if transaction is None: raise HTTPException(status_code=404, detail=\"Transaction not found\") transaction.category_id = transaction_data.category_id transaction.type = transaction_data.type transaction.value = transaction_data.value session.commit() return transaction @main_router.delete(\"/transactions/{transaction_id}\") def delete_transaction(transaction_id: int, user=Depends(auth_handler.auth_wrapper)): transaction = session.get(Transaction, transaction_id) if transaction is None: raise HTTPException(status_code=404, detail=\"Transaction not found\") session.delete(transaction) session.commit() return {\"message\": \"Transaction deleted\"} @main_router.post(\"/balances/{balance_id}/categories/\", response_model=CategoryRead) def create_category(balance_id: int, category: Category, user=Depends(auth_handler.auth_wrapper)): db_balance = session.get(Balance, balance_id) if not db_balance: raise HTTPException(status_code=404, detail=\"Balance not found\") new_category = Category(**category.dict(), balance_id=balance_id) session.add(new_category) session.commit() session.refresh(new_category) return new_category @main_router.put(\"/categories/{category_id}\", response_model=CategoryRead) def update_category(category_id: int, category_data: Category, user=Depends(auth_handler.auth_wrapper)): category = session.get(Category, category_id) if not category: raise HTTPException(status_code=404, detail=\"Category not found\") category.name = category_data.name category.limit = category_data.limit session.commit() return category @main_router.delete(\"/categories/{category_id}\") def delete_category(category_id: int, user=Depends(auth_handler.auth_wrapper)): category = session.get(Category, category_id) if not category: raise HTTPException(status_code=404, detail=\"Category not found\") session.delete(category) session.commit() return {\"message\": \"Category deleted\"}","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u044d\u043d\u043f\u043e\u0438\u043d\u0442\u043e\u0432:"},{"location":"Lab1/#_6","text":"load_dotenv() secret_key = os.getenv(\"JS_SECRET\") class AuthHandler: security = HTTPBearer() pwd_context = CryptContext(schemes=['bcrypt']) secret = secret_key def get_password_hash(self, password): return self.pwd_context.hash(password) def verify_password(self, pwd, hashed_pwd): return self.pwd_context.verify(pwd, hashed_pwd) def encode_token(self, user_id): if self.secret is None: raise ValueError(\"No SECRET_KEY set for JWT encoding\") payload = { 'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=8), 'iat': datetime.datetime.utcnow(), 'sub': user_id } return jwt.encode(payload, self.secret, algorithm='HS256') def decode_token(self, token): try: payload = jwt.decode(token, self.secret, algorithms=['HS256']) return payload['sub'] except jwt.ExpiredSignatureError: raise HTTPException(status_code=401, detail='Expired signature') except jwt.InvalidTokenError: raise HTTPException(status_code=401, detail='Invalid token') def auth_wrapper(self, auth: HTTPAuthorizationCredentials = Security(security)): return self.decode_token(auth.credentials) def get_current_user(self, auth: HTTPAuthorizationCredentials = Security(security)): credentials_exception = HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail='Could not validate credentials' ) username = self.decode_token(auth.credentials) if username is None: raise credentials_exception user = find_user(username) if username is None: raise credentials_exception return user from fastapi import APIRouter, HTTPException, Depends from starlette.responses import JSONResponse from starlette.status import HTTP_201_CREATED from auth import AuthHandler from models import Balance, UserInput, User, UserLogin from useful import select_all_users, find_user from db import session user_router = APIRouter() auth_handler = AuthHandler() @user_router.post('/registration', status_code=201, tags=['users'], description='Register new user') def register(user: UserInput): users = select_all_users() if any(x.username == user.username for x in users): raise HTTPException(status_code=400, detail='Username is taken') hashed_pwd = auth_handler.get_password_hash(user.password) balance = Balance(balance=0) u = User(username=user.username, password=hashed_pwd, balance=balance) session.add_all([u, balance]) session.commit() return JSONResponse(status_code=201, content={\"message\": \"User registered successfully\"}) @user_router.post('/login', tags=['users']) def login(user: UserLogin): user_found = find_user(user.username) if not user_found: raise HTTPException(status_code=401, detail='Invalid username and/or password') verified = auth_handler.verify_password(user.password, user_found.password) if not verified: raise HTTPException(status_code=401, detail='Invalid username and/or password') token = auth_handler.encode_token(user_found.username) return {'token': token} @user_router.post('/users/me', tags=['users']) def get_current_user(user: User = Depends(auth_handler.get_current_user)): return user.username","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432:"},{"location":"Lab1/#_7","text":"from sqlmodel import create_engine, Session import os from dotenv import load_dotenv load_dotenv() db_url = os.getenv(\"DB_ADMIN\") engine = create_engine(db_url, echo=True) session = Session(bind=engine) from sqlmodel import select from db import engine, Session from models import User def select_all_users(): with Session(engine) as session: statement = select(User) res = session.exec(statement).all() return res def find_user(name): with Session(engine) as session: statement = select(User).where(User.username == name) return session.exec(statement).first()","title":"\u0414\u0440\u0443\u0433\u0438\u0435 \u0444\u0430\u0439\u043b\u044b"},{"location":"Lab1/#_8","text":"\u041f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u044f \u0438\u0437\u0443\u0447\u0438\u043b \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 FastAPI, \u043d\u0430\u0443\u0447\u0438\u043b\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430\u043c\u0438.","title":"\u0412\u044b\u0432\u043e\u0434"},{"location":"Lab2/","text":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21162 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u0410\u043a\u0443\u043b\u043e\u0432 \u0410\u043b\u0435\u043a\u0441\u0435\u0439, K33391 \u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u041f\u043e\u043d\u044f\u0442\u044c \u043e\u0442\u043b\u0438\u0447\u0438\u044f \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438 \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432 Python. \u0420\u0430\u0431\u043e\u0442\u0430 \u043e \u043f\u043e\u0442\u043e\u043a\u0430\u0445, \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430\u043c \u0440\u0430\u0437\u0432\u0438\u0442\u044c \u043d\u0430\u0432\u044b\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0438 \u0431\u044b\u0441\u0442\u0440\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c, \u0447\u0442\u043e \u0432\u0430\u0436\u043d\u043e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438 \u043e\u0431\u044a\u0435\u043c\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439. \u042d\u0442\u043e\u0442 \u043e\u043f\u044b\u0442 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0433\u043e\u0442\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u043a \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c, \u0433\u0434\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043b\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438. \u0412\u043e\u043f\u0440\u043e\u0441\u044b \u043f\u0440\u043e \u043f\u043e\u0442\u043e\u043a\u0438, \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0438 \u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f, \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c, \u043d\u0430 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0435 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439 \u043d\u0430 python-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0443\u0440\u043e\u0432\u043d\u044f middle \u0438 \u0412\u044b\u0448\u0435. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u041a\u043e\u0434 asyncio async def calculate_sum_async(start, end): return sum(range(start, end + 1)) async def main_async(total_numbers=1000000, ts=4): part = total_numbers // ts threads = [] for i in range(ts): start = i * part + 1 end = (i + 1) * part if i != ts-1 else total_numbers threads.append(calculate_sum_async(start, end)) results = await asyncio.gather(*threads) total_sum = sum(results) print(f\"Total sum is: {total_sum}\") treading def calculate_sum(start, end): return sum(range(start, end + 1)) def main_threading(total_numbers=1000000, ts=4): threads = [] results = [0] * ts part = total_numbers // ts def worker(part_id): start = part_id * part + 1 end = (part_id + 1) * part if part_id != (ts - 1) else total_numbers results[part_id] = calculate_sum(start, end) for i in range(ts): thread = threading.Thread(target=worker, args=(i,)) threads.append(thread) thread.start() for thread in threads: thread.join() total_sum = sum(results) print(f\"Total sum is: {total_sum}\") multiprocessing def calculate_sum(start, end): return sum(range(start, end + 1)) def worker(start, end, results): partial_sum = calculate_sum(start, end) results.put(partial_sum) def main_multiprocessing(total_numbers=1000000, ts=4): results = Queue() processes = [] part = total_numbers // ts for i in range(ts): start = i * part + 1 end = (i + 1) * part if i != ts - 1 else total_numbers process = Process(target=worker, args=(start, end, results)) process.start() processes.append(process) for process in processes: process.join() total_sum = 0 while not results.empty(): total_sum += results.get() print(f\"Total sum is: {total_sum}\") \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0422\u0438\u043f \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f (\u0441\u0435\u043a) Threading 0.04182000015862286 Multiprocessing 0.3447751000057906 Asyncio 0.0711796001996845 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0411\u044b\u043b \u0432\u044b\u0431\u0440\u0430\u043d \u0441\u0430\u0439\u0442 ebay \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u0438 \u0438\u0445 \u0446\u0435\u043d\u044b, \u0438\u0437 \u043d\u0435\u0433\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u043b\u043e\u0441\u044c 3 url, \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u043b\u043e\u0441\u044c \u043f\u043e 8 \u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441\u043e \u0432\u0442\u043e\u0440\u043e\u0439. \u041a\u043e\u0434 \u041e\u0431\u0449\u0438\u0439 \u043a\u043e\u0434 URLS = ['https://www.ebay.com/sch/i.html?_nkw=phone&_pgn=', 'https://www.ebay.com/sch/i.html?_nkw=shoes+men&_sop=12&_pgn=', 'https://www.ebay.com/sch/i.html?_nkw=lego&_pgn='] PAGES = [2, 3, 4, 5, 6, 7, 8] BD_CON = \"dbname=money_db user=postgres password=sobaka12345 host=localhost\" def pars_item(item): title_tag = item.find('div', class_='s-item__title') if title_tag: title_span = title_tag.find('span', {'role': 'heading'}) if title_span: title_text = title_span.get_text() else: title_text = \"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e\" else: title_text = \"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e\" price = item.find('span', class_='s-item__price') if price: price_text = price.get_text() else: price_text = \"\u0426\u0435\u043d\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430\" return {\"name\": title_text, \"price\": price_text} def insert_into_db(parsed_items): conn = psycopg2.connect(BD_CON) cursor = conn.cursor() cursor.executemany('''INSERT INTO items (name, price) VALUES (%s, %s)''', [(item['name'], item['price']) for item in parsed_items]) conn.commit() cursor.close() conn.close() def parse_and_save(url): for page in PAGES: complete_url = f'{url}{page}' try: response = requests.get(complete_url) response.raise_for_status() except requests.exceptions.RequestException as e: print(f\"\u041e\u0448\u0438\u0431\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443: {complete_url}\\n{e}\") continue soup = BeautifulSoup(response.text, 'html.parser') items = soup.find_all('li', class_='s-item') parsed_items = [] for item in items: item_res = pars_item(item) parsed_items.append(item_res) insert_into_db(parsed_items) def create_db(): conn = psycopg2.connect(BD_CON) cursor = conn.cursor() cursor.execute(''' CREATE TABLE IF NOT EXISTS items ( id SERIAL PRIMARY KEY, name TEXT, price TEXT ) ''') conn.commit() cursor.close() conn.close() create_db() asyncio \u0422\u0443\u0442 \u043d\u0443\u0436\u043d\u043e \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u0438 async def fetch(session, url): async with session.get(url) as response: return await response.text() async def parse_and_save(session, url): for page in PAGES: complete_url = f'{url}{page}' try: text = await fetch(session, complete_url) except aiohttp.ClientError as e: print(f\"\u041e\u0448\u0438\u0431\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443: {complete_url}\\n{e}\") continue soup = BeautifulSoup(text, 'html.parser') items = soup.find_all('li', class_='s-item') parsed_items = [] for item in items: item_res = pars_item(item) parsed_items.append(item_res) insert_into_db(parsed_items) async def main(urls): async with aiohttp.ClientSession() as session: tasks = [] for url in urls: task = parse_and_save(session, url) tasks.append(task) await asyncio.gather(*tasks) if __name__ == \"__main__\": start_time = time.time() loop = asyncio.get_event_loop() try: loop.run_until_complete(main(URLS)) finally: loop.run_until_complete(loop.shutdown_asyncgens()) loop.close() end_time = time.time() execution_time = end_time - start_time print(f\"Async time: {execution_time}\") treading def main(urls): threads = [] for url in urls: thread = Thread(target=parse_and_save, args=(url,)) threads.append(thread) thread.start() for thread in threads: thread.join() if __name__ == \"__main__\": start_time = time.time() main(URLS) end_time = time.time() execution_time = end_time - start_time print(f\"Threading time: {execution_time}\") multiprocessing def main(urls): num_process = len(urls) if len(urls) < 4 else 4 pool = Pool(processes=num_process) pool.map(parse_and_save, urls) if __name__ == \"__main__\": start_time = time.time() main(URLS) end_time = time.time() execution_time = end_time - start_time print(f\"Mutiprocessing time: {execution_time}\") \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0422\u0438\u043f \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f (\u0441\u0435\u043a) \u041e\u0431\u044b\u0447\u043d\u044b\u0439 38.970824003219604 Threading 17.90959644317627 Multiprocessing 16.606712579727173 Asyncio 15.482174634933472","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f2"},{"location":"Lab2/#no2","text":"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u0410\u043a\u0443\u043b\u043e\u0432 \u0410\u043b\u0435\u043a\u0441\u0435\u0439, K33391","title":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21162"},{"location":"Lab2/#_1","text":"\u041f\u043e\u043d\u044f\u0442\u044c \u043e\u0442\u043b\u0438\u0447\u0438\u044f \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438 \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432 Python. \u0420\u0430\u0431\u043e\u0442\u0430 \u043e \u043f\u043e\u0442\u043e\u043a\u0430\u0445, \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430\u043c \u0440\u0430\u0437\u0432\u0438\u0442\u044c \u043d\u0430\u0432\u044b\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0438 \u0431\u044b\u0441\u0442\u0440\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c, \u0447\u0442\u043e \u0432\u0430\u0436\u043d\u043e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438 \u043e\u0431\u044a\u0435\u043c\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439. \u042d\u0442\u043e\u0442 \u043e\u043f\u044b\u0442 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0433\u043e\u0442\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u043a \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c, \u0433\u0434\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043b\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438. \u0412\u043e\u043f\u0440\u043e\u0441\u044b \u043f\u0440\u043e \u043f\u043e\u0442\u043e\u043a\u0438, \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0438 \u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f, \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c, \u043d\u0430 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0435 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439 \u043d\u0430 python-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0443\u0440\u043e\u0432\u043d\u044f middle \u0438 \u0412\u044b\u0448\u0435.","title":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b:"},{"location":"Lab2/#1","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"Lab2/#_2","text":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f:"},{"location":"Lab2/#_3","text":"","title":"\u041a\u043e\u0434"},{"location":"Lab2/#asyncio","text":"async def calculate_sum_async(start, end): return sum(range(start, end + 1)) async def main_async(total_numbers=1000000, ts=4): part = total_numbers // ts threads = [] for i in range(ts): start = i * part + 1 end = (i + 1) * part if i != ts-1 else total_numbers threads.append(calculate_sum_async(start, end)) results = await asyncio.gather(*threads) total_sum = sum(results) print(f\"Total sum is: {total_sum}\")","title":"asyncio"},{"location":"Lab2/#treading","text":"def calculate_sum(start, end): return sum(range(start, end + 1)) def main_threading(total_numbers=1000000, ts=4): threads = [] results = [0] * ts part = total_numbers // ts def worker(part_id): start = part_id * part + 1 end = (part_id + 1) * part if part_id != (ts - 1) else total_numbers results[part_id] = calculate_sum(start, end) for i in range(ts): thread = threading.Thread(target=worker, args=(i,)) threads.append(thread) thread.start() for thread in threads: thread.join() total_sum = sum(results) print(f\"Total sum is: {total_sum}\")","title":"treading"},{"location":"Lab2/#multiprocessing","text":"def calculate_sum(start, end): return sum(range(start, end + 1)) def worker(start, end, results): partial_sum = calculate_sum(start, end) results.put(partial_sum) def main_multiprocessing(total_numbers=1000000, ts=4): results = Queue() processes = [] part = total_numbers // ts for i in range(ts): start = i * part + 1 end = (i + 1) * part if i != ts - 1 else total_numbers process = Process(target=worker, args=(start, end, results)) process.start() processes.append(process) for process in processes: process.join() total_sum = 0 while not results.empty(): total_sum += results.get() print(f\"Total sum is: {total_sum}\")","title":"multiprocessing"},{"location":"Lab2/#_4","text":"\u0422\u0438\u043f \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f (\u0441\u0435\u043a) Threading 0.04182000015862286 Multiprocessing 0.3447751000057906 Asyncio 0.0711796001996845","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b"},{"location":"Lab2/#2","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"Lab2/#_5","text":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0411\u044b\u043b \u0432\u044b\u0431\u0440\u0430\u043d \u0441\u0430\u0439\u0442 ebay \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u0438 \u0438\u0445 \u0446\u0435\u043d\u044b, \u0438\u0437 \u043d\u0435\u0433\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u043b\u043e\u0441\u044c 3 url, \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u043b\u043e\u0441\u044c \u043f\u043e 8 \u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441\u043e \u0432\u0442\u043e\u0440\u043e\u0439.","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f:"},{"location":"Lab2/#_6","text":"","title":"\u041a\u043e\u0434"},{"location":"Lab2/#_7","text":"URLS = ['https://www.ebay.com/sch/i.html?_nkw=phone&_pgn=', 'https://www.ebay.com/sch/i.html?_nkw=shoes+men&_sop=12&_pgn=', 'https://www.ebay.com/sch/i.html?_nkw=lego&_pgn='] PAGES = [2, 3, 4, 5, 6, 7, 8] BD_CON = \"dbname=money_db user=postgres password=sobaka12345 host=localhost\" def pars_item(item): title_tag = item.find('div', class_='s-item__title') if title_tag: title_span = title_tag.find('span', {'role': 'heading'}) if title_span: title_text = title_span.get_text() else: title_text = \"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e\" else: title_text = \"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e\" price = item.find('span', class_='s-item__price') if price: price_text = price.get_text() else: price_text = \"\u0426\u0435\u043d\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430\" return {\"name\": title_text, \"price\": price_text} def insert_into_db(parsed_items): conn = psycopg2.connect(BD_CON) cursor = conn.cursor() cursor.executemany('''INSERT INTO items (name, price) VALUES (%s, %s)''', [(item['name'], item['price']) for item in parsed_items]) conn.commit() cursor.close() conn.close() def parse_and_save(url): for page in PAGES: complete_url = f'{url}{page}' try: response = requests.get(complete_url) response.raise_for_status() except requests.exceptions.RequestException as e: print(f\"\u041e\u0448\u0438\u0431\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443: {complete_url}\\n{e}\") continue soup = BeautifulSoup(response.text, 'html.parser') items = soup.find_all('li', class_='s-item') parsed_items = [] for item in items: item_res = pars_item(item) parsed_items.append(item_res) insert_into_db(parsed_items) def create_db(): conn = psycopg2.connect(BD_CON) cursor = conn.cursor() cursor.execute(''' CREATE TABLE IF NOT EXISTS items ( id SERIAL PRIMARY KEY, name TEXT, price TEXT ) ''') conn.commit() cursor.close() conn.close() create_db()","title":"\u041e\u0431\u0449\u0438\u0439 \u043a\u043e\u0434"},{"location":"Lab2/#asyncio_1","text":"\u0422\u0443\u0442 \u043d\u0443\u0436\u043d\u043e \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u0438 async def fetch(session, url): async with session.get(url) as response: return await response.text() async def parse_and_save(session, url): for page in PAGES: complete_url = f'{url}{page}' try: text = await fetch(session, complete_url) except aiohttp.ClientError as e: print(f\"\u041e\u0448\u0438\u0431\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443: {complete_url}\\n{e}\") continue soup = BeautifulSoup(text, 'html.parser') items = soup.find_all('li', class_='s-item') parsed_items = [] for item in items: item_res = pars_item(item) parsed_items.append(item_res) insert_into_db(parsed_items) async def main(urls): async with aiohttp.ClientSession() as session: tasks = [] for url in urls: task = parse_and_save(session, url) tasks.append(task) await asyncio.gather(*tasks) if __name__ == \"__main__\": start_time = time.time() loop = asyncio.get_event_loop() try: loop.run_until_complete(main(URLS)) finally: loop.run_until_complete(loop.shutdown_asyncgens()) loop.close() end_time = time.time() execution_time = end_time - start_time print(f\"Async time: {execution_time}\")","title":"asyncio"},{"location":"Lab2/#treading_1","text":"def main(urls): threads = [] for url in urls: thread = Thread(target=parse_and_save, args=(url,)) threads.append(thread) thread.start() for thread in threads: thread.join() if __name__ == \"__main__\": start_time = time.time() main(URLS) end_time = time.time() execution_time = end_time - start_time print(f\"Threading time: {execution_time}\")","title":"treading"},{"location":"Lab2/#multiprocessing_1","text":"def main(urls): num_process = len(urls) if len(urls) < 4 else 4 pool = Pool(processes=num_process) pool.map(parse_and_save, urls) if __name__ == \"__main__\": start_time = time.time() main(URLS) end_time = time.time() execution_time = end_time - start_time print(f\"Mutiprocessing time: {execution_time}\")","title":"multiprocessing"},{"location":"Lab2/#_8","text":"\u0422\u0438\u043f \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f (\u0441\u0435\u043a) \u041e\u0431\u044b\u0447\u043d\u044b\u0439 38.970824003219604 Threading 17.90959644317627 Multiprocessing 16.606712579727173 Asyncio 15.482174634933472","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b"},{"location":"Lab3/","text":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21163 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u0410\u043a\u0443\u043b\u043e\u0432 \u0410\u043b\u0435\u043a\u0441\u0435\u0439, K33391 \u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0442\u044c FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 Docker, \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0447\u0435\u0440\u0435\u0437 API \u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044c. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: Docker \u2014 \u044d\u0442\u043e \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\u0445. \u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0443\u043f\u0430\u043a\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438 \u0432\u0441\u0435 \u0435\u0433\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0432 \u0435\u0434\u0438\u043d\u044b\u0439 \u043e\u0431\u0440\u0430\u0437, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043d\u0430 \u043b\u044e\u0431\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0449\u0435\u0439 Docker, \u0447\u0442\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c \u0441\u0440\u0435\u0434\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435. Docker \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0443\u0441\u043a\u043e\u0440\u0438\u0442\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443, \u043f\u043e\u0432\u044b\u0441\u0438\u0442\u044c \u0433\u0438\u0431\u043a\u043e\u0441\u0442\u044c \u0438 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439. \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b Dockerfile FROM python:3.11 WORKDIR /app COPY requirements.txt . RUN pip install --root-user-action=ignore -r /app/requirements.txt COPY . . ENTRYPOINT [ \"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\"] \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432 FastAPI \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430**: \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 URL \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0443 (\u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u043c\u0443 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435) \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443. Dockerfile FROM python:3.11 WORKDIR /parser COPY requirements.txt . RUN pip install --root-user-action=ignore -r /parser/requirements.txt COPY . . CMD [ \"uvicorn\", \"parser:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8081\"] \u0414\u0430\u043b\u044c\u0448\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0432\u0441\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u044b docker-compose version: '3.11' services: postgres: image: postgres container_name: postgres_db environment: - POSTGRES_USER=postgres - POSTGRES_PASSWORD=12345 - POSTGRES_DB=money_db ports: - \"5434:5433\" app: build: context: ./app dockerfile: Dockerfile env_file: - app/.env ports: - \"8080:8080\" depends_on: - postgres parser: build: context: ./parser dockerfile: Dockerfile ports: - \"8081:8081\" depends_on: - postgres - app \u0417\u0434\u0435\u0441\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u0442\u044c \u0434\u043e\u0441\u0443\u0442\u043f\u044b \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f\u0445: \u0443 \u043d\u0430\u0441 \u0441\u0435\u0440\u0432\u0435\u0440 \u0442\u0435\u043f\u0435\u0440\u044c postgres, \u043f\u043e\u0440\u0442 5432 \u0438 \u043f\u0430\u0440\u043e\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u043f\u043e\u0441\u0442\u0433\u0440\u0435\u0441\u0430","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f3"},{"location":"Lab3/#no3","text":"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u0410\u043a\u0443\u043b\u043e\u0432 \u0410\u043b\u0435\u043a\u0441\u0435\u0439, K33391","title":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21163"},{"location":"Lab3/#_1","text":"\u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0442\u044c FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 Docker, \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0447\u0435\u0440\u0435\u0437 API \u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.","title":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b:"},{"location":"Lab3/#1","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"Lab3/#_2","text":"Docker \u2014 \u044d\u0442\u043e \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\u0445. \u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0443\u043f\u0430\u043a\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438 \u0432\u0441\u0435 \u0435\u0433\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0432 \u0435\u0434\u0438\u043d\u044b\u0439 \u043e\u0431\u0440\u0430\u0437, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043d\u0430 \u043b\u044e\u0431\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0449\u0435\u0439 Docker, \u0447\u0442\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c \u0441\u0440\u0435\u0434\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435. Docker \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0443\u0441\u043a\u043e\u0440\u0438\u0442\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443, \u043f\u043e\u0432\u044b\u0441\u0438\u0442\u044c \u0433\u0438\u0431\u043a\u043e\u0441\u0442\u044c \u0438 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439. \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f:"},{"location":"Lab3/#dockerfile","text":"FROM python:3.11 WORKDIR /app COPY requirements.txt . RUN pip install --root-user-action=ignore -r /app/requirements.txt COPY . . ENTRYPOINT [ \"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\"]","title":"Dockerfile"},{"location":"Lab3/#2","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"Lab3/#_3","text":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432 FastAPI \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430**: \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 URL \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0443 (\u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u043c\u0443 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435) \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443.","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f:"},{"location":"Lab3/#dockerfile_1","text":"FROM python:3.11 WORKDIR /parser COPY requirements.txt . RUN pip install --root-user-action=ignore -r /parser/requirements.txt COPY . . CMD [ \"uvicorn\", \"parser:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8081\"] \u0414\u0430\u043b\u044c\u0448\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0432\u0441\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u044b","title":"Dockerfile"},{"location":"Lab3/#docker-compose","text":"version: '3.11' services: postgres: image: postgres container_name: postgres_db environment: - POSTGRES_USER=postgres - POSTGRES_PASSWORD=12345 - POSTGRES_DB=money_db ports: - \"5434:5433\" app: build: context: ./app dockerfile: Dockerfile env_file: - app/.env ports: - \"8080:8080\" depends_on: - postgres parser: build: context: ./parser dockerfile: Dockerfile ports: - \"8081:8081\" depends_on: - postgres - app \u0417\u0434\u0435\u0441\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u0442\u044c \u0434\u043e\u0441\u0443\u0442\u043f\u044b \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f\u0445: \u0443 \u043d\u0430\u0441 \u0441\u0435\u0440\u0432\u0435\u0440 \u0442\u0435\u043f\u0435\u0440\u044c postgres, \u043f\u043e\u0440\u0442 5432 \u0438 \u043f\u0430\u0440\u043e\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u043f\u043e\u0441\u0442\u0433\u0440\u0435\u0441\u0430","title":"docker-compose"}]}